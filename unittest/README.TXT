Applications in the unittest/ directory
---------------------------------------
Use the following test program to validate your installation,
and generate a number of test OMF output files.

The UnitTest executable should be used to run all the tests in this
directory.  Other applications that read and write OMF files, are in
the apps and apps1x sub-directories of the Toolkit.

What does UnitTest do?
----------------------
Each test in the UnitTest program, runs a OMF test, which may either
verify a previously run test, or write out a new test file.  After running 
the test, it runs the Toolkit's OMFI semantic checker on the
file (if it wrote one out).  Some of the tests also contain verify passes
that make sure that the Toolkit can read in the data that it wrote out.
Documented below are the Test names, files that they generate, and 
what kind of semantic checking or data verification is done on the resulting 
file. 

How do I use the UnitTest executable?
-------------------------------------
To run a particular test, look up the test's index number by typing
'UnitTest -p', and then looking for the test you want to execute.
When you find the test you want to run, you can then type 'UnitTest
<number>' for example 'UnitTest 10'.  Some of the tests depend on
tests that appear earlier in the test run.  If you run the tests
in an individual mode, then it may run more than the one test you
specified.  For example, test 12, CopyMob1x modifies the OMF file
generated by WriteComplex1x (Test3).  As I did not want to modify the
OMF file generated by Test3, I first copy the file, and then modify
the copy.  The UnitTest program takes care of the dependencies, so if
you do run 'UnitTest 12', it will first run Test3, then Test11 (copy
the file), and then finally Test12.

A summary of the errors and number of tests run will always appear at the
end of a UnitTest run. 

Run with no arguments, UnitTest will run and verify all of the tests
found in the table below. 

Usage message from UnitTest:
UnitTest usage:  UnitTest [-vVrR][-uU][-pP][[-fF] Test Test1 ...]
     UnitTest with no args runs & verifies all tests        
     UnitTest with -u or -U prints this message             
     UnitTest with -v,-V,-r,-R does the verify only phase of all tests 
     UnitTest with -p or -P prints the entire test table with index numbers 
     UnitTest with test numbers, will run the selected tests, after running 
          any tests that the ones that you've selected depend on.  
     UnitTest with -f or -F followed by one or more test numbers will 
          only run the test(s) specified (don't run dependencies).


Listing of Tests run by UnitTest
--------------------------------

UnitTest -p:
The following tests are available:
[ 1] Write1xMedia       [ 2] MkSimple1x         [ 3] WriteComplex1x    
[ 4] FndSrcComplex1x    [ 5] cp_openMod1x       [ 6] OpenMod           
[ 7] MkSimpFX1x         [ 8] cp_DelMob1x        [ 9] DelMob1x          
[10] Media1xNoWave      [11] cp_copyMob1x       [12] CopyMob1x         
[13] CopyMobX1x         [14] cp_changeMob1x     [15] ChangeMob1x       
[16] CloneMobX1x        [17] DumpDK1x           [18] ObjIter1x         
[19] MkTape1x           [20] TapeFndSrc1x       [21] DupMobs1x         
[22] Attr1x             [23] Media2xFile1x      [24] ManyObjs1x        
[25] PrivReg1x          [26] Patch1x            [27] WriteComplexIMA   
[28] FndSrcComplexIM    [29] cp_openModIMA      [30] OpenModIMA        
[31] MkSmpIMA           [32] cp_DelMobIMA       [33] DelMobIMA         
[34] cp_copyMobIMA      [35] CopyMobIMA         [36] CopyMobXIMA       
[37] cp_changeMobIMA    [38] ChangeMobIMA       [39] CloneMobXIMA      
[40] DumpDKIMA          [41] ObjIterIMA         [42] MkTapeIMA         
[43] TapeFndSrcIMA      [44] DupMobsIMA         [45] Media2xFileIMA    
[46] ManyObjsIMA        [47] PrivRegIMA         [48] PatchIMA          
[49] MkComp2x           [50] CopyMobX           [51] cp_copyMob        
[52] CopyMob            [53] CloneMobX          [54] NgCloneX          
[55] cp_changeMob       [56] ChangeMob          [57] cp_DelMob         
[58] DelMob             [59] FndSrc             [60] IterSrch          
[61] ObjIter            [62] MkIlleg            [63] DumpDK            
[64] DumpFXD            [65] ERCvt              [66] TCCvt             
[67] MkSimple2x         [68] WriteComplex2x     [69] FndSrcComplex2x   
[70] MkDesc2x           [71] MkSimpFX2x         [72] Write2xMedia      
[73] MkTape2x           [74] TapeFndSrc2x       [75] MediaLocators     
[76] DupMobs2x          [77] RawIO              [78] ManyObjs2x        
[79] PrivReg2x          [80] Convert_1x_to_2    [81] Convertback_2x_   
[82] Convert_2x_to_1    [83] ConvertMedia_2x    [84] Cnvrt1xbck2x      
[85] Cnvrt1xFX2x        [86] Cnvt2xFX1x        


Note: All tests that begin with a cp_ copy the input file to the
output file and verify that the output file was written out properly
(to OMFI semantic checker is run on the output file).  This is used
for tests that modify their input file.

ReadComp is used in quite a few tests to help verify the output.  The
first instance of ReadComp (MkSimple1x) has a complete description, but 
later references to ReadComp will say 'see description above'.

 				 verify pass
Test Name     Source     Infile       V Outfile	     Description
------------------------------------------------------------------------
Write1xMedia  MkMed1x.c  None         Y MkMed1x.omf  Uses compatibility API 
				 		     to create combinations
						     of media. 

MkSimple1x    MkSimple.c None         Y Simple1x.omf Uses the OMF Simple
						     Composition Interface to
						     write a simple (flat)
						     composition with a 
						     single video track and a
						     timecode track.  The 
						     video track contains the
						     Roger and Paul clips from
						     the OMF Movie example in 
						     the OMF 2.0 Training class.
						     To keep the example simple,
						     the file mobs, etc. are not
						     included in the file.
              ReadComp.c None           Simple1x.omf Verifies the file by parsing
						     the composition.  It's 
						     purpose is to test out as 
						     much of the  mob traversal 
						     functionality in the Toolkit 
						     as possible.  Right now, it 
						     is not very sophisticated 
						     about errors--if it finds 
						     one, it exits instead of
						     trying to continue.

WriteComplex1 MkCplx.c   None         Y Complx1x.omf This unittest creates a 
						     composition in either a 1.x
						     or 2.x file.  It only creates
						     the objects that can be 
						     expressed in either revision.
						     It also creates master and 
						     file mobs for video and 
						     audio to point to.  The video
						     has real data, and the audio
						     doesn't.  It also creates a 
						     tape mob, to derive the video
						     data from (but not the audio
						     data).
              ReadComp.c None           Complx1x.omf (see above description)

						     
FndSrcComplex FndSrc.c   Complx1x.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, and 
						     uses first 
						     omfiMobFindSource, and 
						     then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

cp_openMod1x  UnitTest.c Complx1x.omf Y OpnMod1x.omf (see note above chart) 

OpenMod       OpenMod.c  None         Y OpnMod1x.omf Opens an existing 1.x OMF 
                                                     file for modify, adds some
						     data to the file and then 
						     closes the file. 

MkSimpFX1x    MkSimpFX.c None         Y SimpFX1x.omf Creates a composition mob
						     with effects, using the 
						     simple composition API.
	      DumpFX.c   SimpFX1x.omf   None         Verifies SimpFX1x.omf by 
						     Dumping all of the effects
						     found in the file.

cp_DelMob1x   UnitTest.c Complx1x.omf Y DelMob1x.omf (see note above chart)

DelMob1x      DelMob.c   None         Y DelMob1x.omf This unittest opens an
						     existing OMF file (of either
						     type 1.x or 2.x) for modify,
						     and attempts to delete all of
						     the mobs in the file.  The
						     resulting file should have no
						     mobs in it.

Media1xNoWave MkMedia.c  None         Y Med1xNoW.omf Creates a 1.x media file with
						     no WAV audio data in it, 
						     using the 1.x compatability 
						     layer.

cp_copyMob1x  UnitTest.c Complx1x.omf Y CpMob1x.omf  (see note above chart)     

CopyMob1x     CopyMob.c  None	      Y	CpMob1x.omf  This unittest opens an 
						     existing OMF file (of either 
						     type 1.x or 2.x) for modify, 
						     finds the composition mobs, 
						     and copies them within the 
						     same file.  Copying means that 
						     the MobID is different, but 
						     the creation and modification 
						     times are updated.

CopyMobX1x    CopyMobX.c Complx1x.omf Y	CpMobX1x.omf This unittest opens an 
						     OMF file (of either type 1.x
						     or 2.x), finds the mobs, and 
						     copies them (including their
						     referenced mobs and media) to
						     another file of the same 
						     type.  It will help to test 
						     that duplicate mobs are not 
						     copied.

cp_changeMob1 UnitTest.c Complx1x.omf Y ChgMob1x.omf (see note above chart)    

ChangeMob1x   ChgMob.c	 None         Y ChgMob1x.omf This unittest opens an 
						     OMF file for modify, and uses
						     iterators and the 
						     omfiMobMatchAndExecute() 
						     function (via the 
						     omfiMobChangeRef() function)
						     to change all of the source 
						     clips in the found 
						     composition mob to the point 
						     to a mob with UID 
						     (999999, 999999, 999999).
						     The purpose of this test is
						     to verify the mob traversal 
						     functionality.

CloneMobX1x   CloneX.c   Complx1x.omf Y ClnMbX1x.omf This unittest opens an 
						     OMF file and clones 
						     (maintaining mob IDs), the
						     composition mob, all mobs 
						     that it references and all 
						     associated media to an
						     external file.  It will copy 
						     a 1.x file to another 1.x 
						     file, or a 2.x file to 
						     another 2.x file.  It does 
						     not clone between file revs.

DumpDK1x      DumpDX.c   Complx1x.omf N None         This unittest opens an
						     OMF file, and tries to find 
						     all of the known datakinds 
						     for that revision.
						     It also looks for a bogus
						     datakind to make sure that 
						     the correct error is 
						     returned.

ObjIter1x     ObjIter.c	 Complx1x.omf N None         This unittest uses the object
						     and property iterators to 
						     locate all of the objs in 
						     the file and dump them to the
						     screen.  It will also find 
						     (floating) objects that are
						     not linked to a mob.

MkTape1x      MkTape.c   None         Y MkTape1x.omf Creates and verifies video 
						     tape, file mobs, and digital 
						     data for video.T

TapeFndSrc1x  FndSrc.c   MkTape1x.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, and 
						     uses first 
						     omfiMobFindSource, and 
						     then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

DupMobs1x     DupMobs.c  None         N DupMob1x.omf This unittest creates an OMF
						     file of the specified 
						     revision, creates duplicate 
						     mobs, and then the duplicate
						     mob iterator finds them.
  
Attr1x        Attr1x.c   None         Y Attr1x.omf   This unittest creates a 1.x
						     file with the API compat
						     layer, creates an attribute 
						     array object, and appends 3
						     new attribute objects to it
						     (an integer attribute, a 
						     a string attribute and an
						     object reference attribute).
						     The attribute array is 
						     appended to the HEAD object.

Media2xFile1x MkMedia.c	 None         Y M2xF1x.omf   Creates numerous media types
						     first writing them, then 
						     verifying that the data can
						     be read back into the 
						     toolkit.

ManyObjs1x    ManyObjs.c None         Y ManyO1x.omf  This unittest creates a file
						     of the given revision, and
						     creates a fake composition 
						     with many fill objects.  It
						     is attempting to test reading
						     and writing of many objects.
              ReadComp.c None           ManyO1x.omf  (see above description)

PrivReg1x     PrivReg.c  None         Y PrivR1x.omf  This test creates private 
						     data and properties, and 
						     appends them to a newly 
						     created mob object.  Besides 
						     testing the creation of 
						     private data, it also tests 
						     the remaining accessor 
						     functions that haven't been 
						     tested in other unittests
						     by creating properties of 
						     those types.
              ReadComp.c None           PrivR1x.omf  (see above description)

Patch1x       Patch1x.c None          Y Patch1x.omf  This unittest tests the 
						     omfPatch1xMobs() function 
						     which fixes editrates, etc.
						     on mobs that weren't built 
						     bottom up.
              ReadComp.c None           Patch1x.omf  (see above description)
    
WriteComplexI MkCplx.c   None         Y CmplxIMA.omf This unittest creates a 
						     composition in either a 1.x
						     or 2.x file.  It only creates
						     the objects that can be 
						     expressed in either revision.
						     It also creates master and 
						     file mobs for video and 
						     audio to point to.  The video
						     has real data, and the audio
						     doesn't.  It also creates a 
						     tape mob, to derive the video
						     data from (but not the audio
						     data).
              ReadComp.c None           CmplxIMA.omf (see above description)

FndSrcComplex FndSrc.c   CmplxIMA.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, using
						     first omfiMobFindSource, and 
						     then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

cp_openModIMA UnitTest.c CmplxIMA.omf Y OpModIMA.omf (see note above chart) 

OpenModIMA    OpenMod.c  None         Y OpModIMA.omf Opens an existing 1.x OMF 
                                                     file for modify, adds some
						     data to the file and then 
						     closes the file. 

MkSmpIMA      MkSimple.c None         Y MkSmpIMA.omf Uses the OMF Simple
						     Composition Interface to
						     write a simple (flat)
						     composition with a 
						     single video track and a
						     timecode track.  The 
						     video track contains the
						     Roger and Paul clips from
						     the OMF Movie example in 
						     the OMF 2.0 Training class.
						     To keep the example simple,
						     the file mobs, etc. are not
						     included in the file.
              ReadComp.c None           MkSmpIMA.omf (see description above)

cp_DelMobIMA  UnitTest.c CmplxIMA.omf Y DelMbIMA.omf (see note above chart)

DelMobIMA     DelMob.c   None         Y DelMbIMA.omf This unittest opens an
						     existing OMF file (of either
						     type 1.x or 2.x) for modify,
						     and attempts to delete all of
						     the mobs in the file.  The
						     resulting file should have no
						     mobs in it.

cp_copyMobIMA UnitTest.c CmplxIMA.omf Y CpMobIMA.omf (see note above chart)     

CopyMobIMA    CopyMob.c  None	      Y	CpMobIMA.omf This unittest opens an 
						     OMF file for modify, finds the 
						     composition mobs, and copies
						     them within the same file.
						     Copying means that the MobID 
						     is different, but the creation
						     and modification times are
						     updated.

CopyMobXIMA   CopyMobX.c CmplxIMA.omf Y	CpMbXIMA.omf This unittest opens an 
						     OMF file (of either type 1.x
						     or 2.x), finds the mobs, and 
						     copies them (including their
						     referenced mobs and media) to
						     another file of the same type.
						     It will help to test that 
						     duplicate mobs are not copied.

cp_changeMobI UnitTest.c CmplxIMA.omf Y ChgMbIMA.omf (see note above chart)    

ChangeMobIMA   ChgMob.c	 None         Y ChgMbIMA.omf This unittest opens an 
						     OMF file for modify, and uses
						     iterators and the 
						     omfiMobMatchAndExecute() 
						     function (via the 
						     omfiMobChangeRef() function)
						     to change all of the source 
						     clips in the found 
						     composition mob to the point 
						     to a mob with UID 
						     (999999, 999999, 999999).
						     The purpose of this test is 
						     to verify the mob traversal 
						     functionality.


CloneMobXIMA  CloneX.c   CmplxIMA.omf Y ClnMXIMA.omf This unittest opens an 
						     OMF file and clones 
						     (maintaining mob IDs), the
						     composition mob, all mobs that
						     it references and all 
						     associated media to an
						     external file.  It will copy
						     a 1.x file to another 1.x 
						     file, or a 2.x file to another 
						     2.x file.  It does not clone 
						     between file revs.

DumpDKIMA     DumpDX.c   CmplxIMA.omf N None         This unittest opens an
						     existing OMF file (of either
						     type 1.x or 2.x), and tries
						     to find all of the known 
						     datakinds for that revision.
						     It also looks for a bogus
						     datakind to make sure that
						     the correct error is 
						     returned.

ObjIterIMA    ObjIter.c	 CmplxIMA.omf N None         This unittest uses the object
						     and property iterators to 
						     locate all of the objs in 
						     the file and dump them to the
						     screen.  It will also find 
						     (floating) objects that are
						     not linked to a mob.

MkTapeIMA     MkTape.c   None         Y MkTpeIMA.omf Creates and verifies video 
						     tape, file mobs, and digital 
						     data for video.

TapeFndSrcIMA FndSrc.c   MkTpeIMA.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, and 
						     using first 
						     omfiMobFindSource, and 
						     then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     thetimecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

DupMobsIMA    DupMobs.c  None         N DupMbIMA.omf This unittest creates an OMF
						     file of the specified 
						     revision, creates duplicate 
						     mobs, and then the duplicate
						     mob iterator finds them.

Media2xFileIM MkMedia.c	 None         Y M2xFIMA.omf  Creates numerous media types
						     first writing them, then 
						     verifying that the data can
						     be read back into the 
						     toolkit.

ManyObjsIMA   ManyObjs.c None         Y ManyOIMA.omf This unittest creates a file
						     of the given revision, and
						     creates a fake composition 
						     with many fill objects.  It
						     is attempting to test reading
						     and writing of many objects.
              ReadComp.c None           ManyOIMA.omf (see description above)

PrivRegIMA    PrivReg.c  None         Y PrivRIMA.omf This test creates private 
						     data and properties, and 
						     appends them to a newly 
						     created mob object.  Besides 
						     testing the creation of 
						     private data, it also tests 
						     the remaining accessor 
						     functions that haven't been 
						     tested in other unittests
						     by creating properties of 
						     those types.
              ReadComp.c None           PrivRIMA.omf (see description above)

PatchIMA       Patch1x.c None         Y PatchIMA.omf This unittest tests the 
						     omfPatch1xMobs() function 
						     which fixes editrates, etc.
						     on mobs that weren't built 
						     bottom up.
               ReadComp.c None          PatchIMA.omf (see description above)

MkComp2x       MkComp2x.c None        Y MkComp2x.omf This unittest creates a 
						     complicated composition in a 
						     2.x file, that has one of
						     every possible 2.x object in 
						     it.  It also creates master 
						     and file mobs for video
						     and audio to point to.  The 
						     video has real data, and the
						     audio doesn't.  It also 
						     creates a tape mob, to derive 
						     the video data from (but not 
						     the audio data).  The 
						     composition will have effects, 
						     scopes, media groups, selectors, 
						     etc.
              ReadComp.c None           MkComp2x.omf (see description above)

CopyMobX      CopyMobX.c MkComp2x.omf Y CopyMobX.omf This unittest opens an 
						     OMF file (of either type 1.x
						     or 2.x), finds the mobs, and 
						     copies them (including their
						     referenced mobs and media) to
						     another file of the same 
						     type.  It will help to test 
						     that duplicate mobs are not 
						     copied.

cp_copyMob    UnitTest.c MkComp2x.omf Y CopyMob.omf  (see note above chart)     

CopyMobIMA    CopyMob.c  None	      Y	CopyMob.omf  This unittest opens an
						     OMF file for modify, finds 
						     the composition mobs, and 
						     copies them within the same 
						     file.  Copying means that the 
						     MobID is different, but the 
						     creation and modification 
						     times are updated.

CloneMobX     CloneX.c   MkComp2x.omf Y ClneMobX.omf This unittest opens an 
						     OMF file and clones 
						     (maintaining mob IDs), the
						     composition mob, all mobs
						     that it references and all 
						     associated media to an
						     external file.  It will copy
						     a 1.x file to another 1.x file,
						     file, or a 2.x file to another
						     2.x file.  It does not clone 
						     between file revs.

NgCloneX      NgCloneX.c MkComp2x.omf N NgCloneX.omf This tests verifies that a
						     particular error code is 
						     generated when you try to 
						     place Mobs from a 2x file 
						     into a 1x file (error is:
						     OM_ERR_FILEREV_DIFF).

cp_changeMob  UnitTest.c MkComp2x.omf Y ChngeMob.omf (see note above chart)    

ChangeMob     ChgMob.c	 None         Y ChngeMob.omf This unittest opens an
						     OMF file for modify, and uses
						     iterators and the 
						     omfiMobMatchAndExecute() 
						     function (via the 
						     omfiMobChangeRef() function)
						     to change all of the source 
						     clips in the found 
						     composition mob to the point
						     to a mob with UID 
						     (999999, 999999, 999999).
						     The purpose of this test is 
						     to verify the mob traversal 
						     functionality.

cp_DelMob     UnitTest.c MkComp2x.omf Y DelMob.omf   (see note above chart)

DelMob        DelMob.c   None         Y DelMob.omf   This unittest opens an
						     existing OMF file (of either
						     type 1.x or 2.x) for modify,
						     and attempts to delete all of
						     the mobs in the file.  The
						     resulting file should have no
						     mobs in it.

FndSrc        FndSrc.c   MkComp2x.omf Y None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, and 
						     using first 
					             omfiMobFindSource, and 
						     then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

IterSrch      IterSrch.c MkComp2x.omf Y None         This unittest tests the
						     search criteria on iterators,
						     by searching for a track with
						     a specific datakind (picture)
						     in a mob.  If a picture track
						     does not exist, it will 
						     return an error.

ObjIter       ObjIter.c	 MkComp2x.omf N None         This unittest uses the object
						     and property iterators to 
						     locate all of the objs in 
						     the file and dump them to the
						     screen.  It will also find 
						     (floating) objects that are
						     not linked to a mob.

MkIlleg       MkIlleg.c	 None         N WriteIll.omf This unittest creates an
						     illegal 2.x OMF file to be
						     used by other applications 
						     that do negative testing.  It
						     should especially help test
						     the semantic checking 
						     functionality.
              NgFndSrc.c WriteIll.omf   None         This negative unittest tests
						     omfiMobMatchAndExecute() and
						     looks for SCLPs in mobs that
						     point to mobs that don't 
						     exist in the file.  It needs
						     to be run on an illegal file
						     in order to report problems.

DumpDK        DumpDX.c   MkComp2x.omf Y None         This unittest opens an
						     existing OMF file (of either
						     type 1.x or 2.x), and tries
						     to find all of the known 
						     datakinds for that revision.
						     It also looks for a bogus
						     datakind to make sure that 
						     the correct error is 
						     returned.

ERCvt         ERCvt.c    None         N None         This unittest tests that the
						     editrate conversion functions
						     work properly on different 
						     editrates.  It does not open
						     or create an OMF file.

TCCvt         TCCvt      None         N None         This unittest tests the 
						     timecode conversion 
						     functionality.  It does not 
						     open or create an OMF file.
						
MkSimple2x    MkSimple.c None         Y Simple2x.omf Uses the OMF Simple
						     Composition Interface to
						     write a simple (flat)
						     composition with a 
						     single video track and a
						     timecode track.  The 
						     video track contains the
						     Roger and Paul clips from
						     the OMF Movie example in 
						     the OMF 2.0 Training class.
						     To keep the example simple,
						     the file mobs, etc. are not
						     included in the file.
              ReadComp.c None           Simple2x.omf (see description above)

WriteComplex2 MkCplx.c   None         Y Complx2x.omf This unittest creates a 
						     composition in either a 1.x
						     or 2.x file.  It only creates
						     the objects that can be 
						     expressed in either revision.
						     It also creates master and 
						     file mobs for video and 
						     audio to point to.  The video
						     has real data, and the audio
						     doesn't.  It also creates a 
						     tape mob, to derive the video
						     data from (but not the audio
						     data).
              ReadComp.c None           Complx2x.omf (see description above)

FndSrcComplx2 FndSrc.c   Complx2x.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks
						     for composition mobs, and 
						     uses first omfiMobFindSource,
						     and then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

MkDesc2x      MkDesc.c   None         Y MkDesc2x.omf This unittest creates a 2.x
						     file with a tape and film mob
						     in it.  It then writes and 
						     reads back (to verify) tape 
						     and film descriptor
						     information.

MkSimpFX2x    MkSimpFX.c None         Y SimpFX2x.omf Uses the OMF Simple 
						     Composition Interface to 
						     write a simple (flat) 
						     composition with a single 
						     video track and a timecode
						     track. The video track
						     contains the Roger and Paul 
						     clips from the OMF Movie 
						     example in the OMF 2.0 
						     Training class.  To keep
			      			     the example simple, the file 
						     mobs, etc. are not included
						     in the file.
	      DumpFX.c   SimpFX2x.omf   None         Verifies SimpFX2x.omf by 
						     Dumping all of the effects
						     found in the file.

Write2xMedia  MkMedia.c	 None         Y Media2x.omf  Creates numerous media types
						     first writing them, then 
						     verifying that the data can
						     be read back into the 
						     toolkit.

MkTape2x      MkTape.c   None         Y MkTape2x.omf Creates and verifies video 
						     tape, file mobs, and digital 
						     data for video.

TapeFndSrc2x  FndSrc.c   MkTape2x.omf N None         This unittest opens a file 
						     (either 1.x or 2.x), looks 
						     for composition mobs, and 
						     uses first omfiMobFindSource, 
						     and then omfmOffsetToTimecode 
						     (which also calls 
						     omfiMobFindSource) to find 
						     the timecode for a specific 
						     position in a specific track.
						     This unittest will only work 
						     on files with tape mobs, and 
						     that have the track and 
						     position searched for.  It 
						     shouldn't be run on just any 
						     OMF file, as it may not work 
						     properly.

MediaLocators MkOMFLoc.c None         Y MkOMFLoc.omf This unittest creates an OMF
						     file that uses UNXL (and 
						     other locators) to point to
						     another OMF file that 
						     contains RGBA and CDCI Media.

DupMobs2x     DupMobs.c  None         N DupMob2x.omf This unittest creates an OMF
						     file of the specified
						     revision, creates duplicate
						     mobs, and then the duplicate
						     mob iterator finds them.

RawIO         MkRawLoc.c None         N rawRef.omf   This unittest creates a raw
						     audio file using the native
						     codec, and a composition 
						     which references the raw 
						     file.  The raw file is then 
						     openned from the composition
						     and the data compared.

ManyObjs2x    ManyObjs.c None         Y ManyO2x.omf  This unittest creates a file
						     of the given revision, and
						     creates a fake composition 
						     with many fill objects.  It
						     is attempting to test reading
						     and writing of many objects.
              ReadComp.c None           ManyO2x.omf  (see description above)

PrivReg2x     PrivReg.c  None         Y PrivR2x.omf  This test creates private 
						     data and properties, and 
						     appends them to a newly 
						     created mob object.  Besides 
						     testing the creation of 
						     private data, it also tests 
						     the remaining accessor 
						     functions that haven't been 
						     tested in other unittests by
						     creating properties of those
						     types.
              ReadComp.c None           PrivR2x.omf  (see description above)

Convert*      Convert.c                              This unittest opens an 
						     OMF file (of either type 1.x 
						     or 2.x) and attempts to 
						     convert the file to the other 
						     equivalent construct in the 
						     other revision.  If it cannot
						     map the construct, it either
						     gives up or converts it to
						     a FILL object.  It does not
						     handle private data.  1.x 
						     attributes are not converted
						     to 2.x structures, they are
						     simply ignored.  2.x effects
						     are only converted if a 1.x
						     equivalent structure exists.

Convert_1x_to Convert.c  OpnMod1x.omf Y CvtMod2x.omf (See Convert* above). This 
						     particular test converts the
						     OpenModify1x test result to 
						     a 2.x OMF file.

Convertback_2 Convert.c  CvtMod2x.omf Y CvtBck1x.omf (See Convert* above).  This
						     test takes the output of the
						     previous test, and converts
						     it back to 1.x format.

Convert_2x_to Convert.c  Complx2x.omf Y CvtComp1.omf (See Convert* above).  This
						     test takes the output of 
						     the WriteComplex2x test, and
						     converts it to 1.x format.

ConvertMedia2 Convert.c  Media2x.omf  Y Cvt2xMed.omf (See Convert* above).  This
						     test takes the output of
						     the Write2xMedia test, and
						     converts it to the 1.x 
						     format.

Cnvrt1xbck2x  Convert.c  Cvt2xMed.omf Y CvtB2xMd.omf (See Convert* above).  This
						     test takes the output of the
						     previous test and converts it
						     back to the 2.x Media format.

Cnvrt1xFX2x   Convert.c  SimpFX1x.omf Y FX1xto2x.omf (See Convert* above).  This
						     test takes the output of the
						     SimpleFX1x test and converts
						     it to a 2.x OMF format.

Cnvt2xFX1x    Convert.c  SimpFX2x.omf Y FX2xto1x.omf (See Convert* above).  This
						     test takes the output of the
						     SimpleFX2x test and converts
						     it to a 1.x OMF format.

NOTE: The file in the outfile column, may be listed in the test's
summary (you see these when the UnitTest's are running) as being an
Input file.  If a test lists an Input file, and no Output file, then
the filename listed as an Input is the file created by that test run.



